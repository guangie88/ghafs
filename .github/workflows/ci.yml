name: ci

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:   # For testing, do a release on v0.0.0 (then delete it)
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        version:
        - go: "1.12.x"
          platform: ubuntu-latest
          goos: linux
          goarch: amd64
        - go: "1.12.x"
          platform: macos-latest
          goos: darwin
          goarch: amd64
        - go: "1.13.x"
          platform: ubuntu-latest
          goos: linux
          goarch: amd64
        - go: "1.13.x"
          platform: macos-latest
          goos: darwin
          goarch: amd64
        - go: "1.14.x"
          platform: ubuntu-latest
          goos: linux
          goarch: amd64
        - go: "1.14.x"
          platform: macos-latest
          goos: darwin
          goarch: amd64
      fail-fast: true
    runs-on: "${{ matrix.version.platform }}"
    steps:
    - name: Install Go
      uses: actions/setup-go@v1
      with:
        go-version: "${{ matrix.version.go }}"
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build executable
      run: go build -v -ldflags="-s -w" ./...
      env:
        GOOS: "${{ matrix.version.goos }}"
        GOARCH: "${{ matrix.version.goarch }}"
        CGO_ENABLED: "0"

  release:
    needs: [build]
    if: github.event_name == 'release'
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64]
      fail-fast: true
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Extract branch or tag value
      run: |-
        [[ -z "${{ github.head_ref }}" ]] && REF="$(echo "${{ github.ref }}" | awk -F/ '{print $NF}')" || REF="${{ github.head_ref }}"
        echo "::set-env name=REF::${REF}"
    - name: Upload releases
      uses: wangyoucao577/go-release-action@v1.4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        goos: ${{ matrix.goos }}
        goarch: ${{ matrix.goarch }}
        goversion: "1.14"
        binary_name: "ghafs"
        ldflags: "-s -w"
      env:
        CGO_ENABLED: "0"
